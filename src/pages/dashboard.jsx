import { Center, Grid, Pagination, Table } from '@mantine/core';
import Head from 'next/head';
import React, { useEffect, useMemo, useState } from 'react';

import { Button } from 'primereact/button';
import { Column } from 'primereact/column';
import { DataTable } from 'primereact/datatable';
import { Dropdown } from 'primereact/dropdown';
import { InputText } from 'primereact/inputtext';
import { Ripple } from 'primereact/ripple';
import { classNames } from 'primereact/utils';

import { BsArrowDownLeftCircle } from 'react-icons/bs';

import {
  BsCalendarEventFill,
  BsFillPersonFill,
  BsPersonCheckFill,
} from 'react-icons/bs';
import { FaCoins } from 'react-icons/fa';
import SideBar from '../components/SideBar';
import SignIn from '../components/SignIn';

/** @param {import('next').InferGetServerSidePropsType<typeof getServerSideProps> } props */
function Dashboard({ members, cards }) {
  const itemsPerPage = 10;
  const totalPages = members.length / itemsPerPage;
  const [activePage, setPage] = useState(1);
  const displayData = useMemo(() => {
    const start = (activePage - 1) * itemsPerPage;
    return members.slice(start, start + itemsPerPage);
  }, [activePage, members]);

  const rows = displayData.map((member) => (
    <tr key={member.discordName}>
      <td>{member.discordName}</td>
      <td>{member.discordId}</td>
      <td>{member.osrsName}</td>
      <td>{member.points}</td>
      <td>{member.splits}</td>
    </tr>
  ));

  const dashInfo = [
    {
      icon: <BsFillPersonFill />,
      amount: cards[2],
      title: 'Members',
      iconColor: '#2b2e2c',
      iconBg: '#7aff9e',
      pcColor: 'red-600',
    },
    {
      icon: <BsPersonCheckFill />,
      amount: cards[0],
      title: 'Total Points',
      iconColor: '#027078',
      iconBg: '#E5FAFB',
      pcColor: 'red-600',
    },
    {
      icon: <FaCoins />,
      amount: cards[1],
      title: 'Total Splits',
      iconColor: 'rgb(255, 244, 229)',
      iconBg: 'rgb(254, 201, 15)',
      pcColor: 'green-600',
    },
    {
      icon: <BsCalendarEventFill />,
      amount: 'Zulrah',
      title: 'Current Event',
      iconColor: 'rgb(228, 106, 118)',
      iconBg: 'rgb(255, 244, 229)',
      pcColor: 'green-600',
    },
  ];
  // const { data: session } = useSession()

  return (
    <>
      <Head>
        <title>Aventus Dashboard</title>
        <meta name='description' content='Generated by create-t3-app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <main>
        <SideBar />
        <div className='pl-20'>
          <Center>
            <Grid justify='center'>
              {dashInfo.map((item) => (
                <div
                  key={item.title}
                  className='flex  text-gray-200 text-center items-center bg-secondary-dark-bg h-44 w-44 rounded-2xl mt-12 mb-4 mx-4'>
                  <Grid.Col span={12}>
                    <button
                      type='button'
                      style={{
                        color: item.iconColor,
                        backgroundColor: item.iconBg,
                      }}
                      className='text-2xl opacity-0.9 rounded-full  p-4 hover:drop-shadow-xl'>
                      {item.icon}
                    </button>
                    <p className='mt-3'>
                      <span className='text-lg font-semibold text-light-gray'>
                        {item.amount}
                      </span>
                    </p>
                    <p className='mt-1 text-sm text-gray-400'>{item.title}</p>{' '}
                  </Grid.Col>
                </div>
              ))}

              <Grid.Col md={6} lg={6}>
                <Center>
                  <div className='bg-main-dark-bg p-4 text-light-gray rounded-xl'>
                    <Table striped highlightOnHover>
                      <thead>
                        <tr>
                          <th>Discord Name:</th>
                          <th>Discord ID:</th>
                          <th>OSRS Name:</th>
                          <th>Points:</th>
                          <th>Splits:</th>
                        </tr>
                      </thead>
                      <tbody>{rows}</tbody>
                    </Table>
                    <Pagination
                      grow
                      size='md'
                      page={activePage}
                      onChange={setPage}
                      total={totalPages}
                    />
                  </div>
                </Center>
              </Grid.Col>
            </Grid>
            <SignIn />
          </Center>
        </div>
      </main>
    </>
  );
}

export async function getServerSideProps() {
  const https = require('https');
  const agent = new https.Agent({
    rejectUnauthorized: false,
  });
  const res = await fetch('https://78.108.218.94:25837/api/members', {
    agent,
  });

  const members = await res.json();

  const res2 = await fetch('https://78.108.218.94:25837/api/cards', {
    agent,
  });
  const cards = await res2.json();
  return {
    props: {
      members,

      cards,
    },
  };
}

export default Dashboard;
